@import '../_mixins/button-control-variant';

// >>> Base
.btnControl {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  padding: $btnControlPadding;
  line-height: $btnControlLineHeight;
  font-family: $btnControlFontFamily;
  font-size: $btnControlFontSize;
  font-weight: $btnControlFontWeight;
  text-align: center;
  text-decoration: none;
  white-space: nowrap;
  vertical-align: middle;
  user-select: none;
  border: $btnControlBorderWidth solid transparent;
  border-radius: 0;
  cursor: pointer;
}

.btnControl:before {
  content: " ";
  opacity: $btnControlIconOpacity;
  display: table; // Guys, i can't explain why, but it's better round off
  height: 1em;
  width: 1em;
  border: $btnControlIconBorderWidth solid transparent;
}
// <<< Base


// >>> Focus
.btnControl:focus,
.btnControl.btnControl--focus  {
  outline: none;
}

.btnControl:focus:before,
.btnControl.btnControl--focus:before  {}
// <<< Focus


// >>> Disabled
.btnControl:disabled,
.btnControl.btnControl--disabled,
fieldset:disabled .btnControl {
  opacity: $btnControlDisabledOpacity;
  cursor: default;
  pointer-events: none;
}

.btnControl:disabled:before,
.btnControl.btnControl--disabled:before,
fieldset:disabled .btnControl:before {}
// <<< Disabled


// >>> Checked
.btnControl.btnControl--checked {}

.btnControl.btnControl--checked:before {
  opacity: 1;
}
// <<< Checked


// >>> With labels
.btnControl.btnControl--hasLabel:before {
  margin-right: 0.4em;
}
// <<< With labels


.btnControl {
  @include button-control-variant(
    $btnControlColor,
    $btnControlBgColor,
    $btnControlBorderColor,
    $btnControlHoverColor,
    $btnControlHoverBgColor,
    $btnControlHoverBorderColor,
    $btnControlFocusColor,
    $btnControlFocusBgColor,
    $btnControlFocusBorderColor,
    $btnControlFocusBoxShadow,
    $btnControlActiveColor,
    $btnControlActiveBgColor,
    $btnControlActiveBorderColor,
    $btnControlDisabledColor,
    $btnControlDisabledBgColor,
    $btnControlDisabledBorderColor,
    $btnControlIconBgColor,
    $btnControlIconBorderColor,
    $btnControlIconCheckedBgColor,
    $btnControlIconCheckedBorderColor
  );
}


// >>> Transition
.btnControl {
  transition: $btnControlTransition;
}

.btnControl:before {
  transition: $btnControlIconTransition;
}

@media screen and (prefers-reduced-motion: reduce) {
  .btnControl {
    transition: none;
  }

  .btnControl:before {
    transition: none;
  }
}
// <<< Transition


// >>> Neighbors
.btnControl + .btnControl {
  margin-left: $btnControlNgbMargin;
}
// <<< Neighbors


// >>> Radio button
.btnControl.btnControl--radio {
  border-radius: calc(#{$btnControlLineHeight}em + #{$btnControlPadding} / 2);
}

.btnControl.btnControl--radio:before {
  border-radius: calc(#{$btnControlLineHeight}em / 2);
}
// <<< Radio button
