@use "sass:list";
@use "sass:meta";
@use "sass:selector";

@function expand-selector(
  $selector,
) {
  @if $selector == --HOVER {
    @return ":hover";
  }
  @else if $selector == --ACTIVE {
    @return ":active";
  }
  @else if $selector == --FOCUS {
    @return ":focus";
  }
  @else if $selector == --CHECKED {
    @return ":checked";
  }
  @else if $selector == --DISABLED {
    @return ":disabled";
  }
  @else if $selector == --FIRST-CHILD {
    @return ":first-child";
  }
  @else if $selector == --LAST-CHILD {
    @return ":last-child";
  }
  @else {
    @return $selector;
  }
}

@function get-nest-selectors(
  $selectors...
) {
  $nest-selectors: ();

  @for $i from 1 through list.length($selectors) {
    $selector: list.nth($selectors, $i);

    @if meta.type-of($selector) == "list" {
      $nest-selectors: list.append($nest-selectors, #{to-string($selector, $glue: ", ")});
    }
    @else if meta.type-of($selector) == "function" {
      $nest-selectors: list.append($nest-selectors, meta.call($selector));
    }
    @else {
      $nest-selectors: list.append($nest-selectors, expand-selector($selector));
    }
  }

  @return $nest-selectors;
}

@mixin use(
  $selectors...
) {
  $nest-selectors: get-nest-selectors($selectors...);
  @if & {
    @at-root {
      #{selector.nest(&, $nest-selectors...)} {
        @content;
      }
    }
  }
  @else {
    #{selector.nest($nest-selectors...)} {
      @content;
    }
  }
}

@mixin exactly(
  $selectors...
) {
  $nest-selectors: get-nest-selectors($selectors...);
  @at-root {
    #{selector.nest(&, $nest-selectors...)} {
      @content;
    }
  }
}

@function that-is(
  $selectors...
) {
  $nest-selectors: get-nest-selectors($selectors...);
  @return "&#{selector.nest($nest-selectors...)}";
}

@function that-is-not(
  $selectors...
) {
  $nest-selectors: get-nest-selectors($selectors...);
  @return "&:not(#{selector.nest($nest-selectors...)})";
}

@function that-is-inside(
  $selectors...
) {
  $nest-selectors: get-nest-selectors($selectors...);
  @return "#{selector.nest($nest-selectors...)} &";
}

@function that-is-subsequent-to(
  $selectors...
) {
  $nest-selectors: get-nest-selectors($selectors...);
  @return "#{selector.nest($nest-selectors...)} ~ &";
}

@function that-is-child-of(
  $selectors...
) {
  $nest-selectors: get-nest-selectors($selectors...);
  @return "#{selector.nest($nest-selectors...)} > &";
}

@function that-has(
  $selectors...
) {
  $nest-selectors: get-nest-selectors($selectors...);
  @return "&:has(#{selector.nest($nest-selectors...)})";
}

@function that-has-not(
  $selectors...
) {
  $nest-selectors: get-nest-selectors($selectors...);
  @return "&:not(:has(#{selector.nest($nest-selectors...)}))";
}

@function to-string(
  $list,
  $glue: "",
) {
  $result: "";

  @for $i from 1 through list.length($list) {
    $e: list.nth($list, $i);

    @if meta.type-of($e) == "list" {
      $result: "#{$result}#{to-string($e, $glue)}";
    } @else {
      $result: "#{$result}#{expand-selector($e)}";
    }

    @if ($i != list.length($list)) {
      $result: "#{$result}#{$glue}";
    }
  }

  @return $result;
}

// -- STYLES -- //

@mixin display-style(
  $display,
  $align-items: --DEFAULT,
  $justify-content: --DEFAULT,
) {
  display: $display;

  @if $display == flex {
    @if $align-items == --DEFAULT {
      align-items: stretch;
    }
    @else if $align-items != --UNDEFINED {
      align-items: $align-items;
    }
    @if $justify-content == --DEFAULT {
      justify-content: flex-start;
    }
    @else if $justify-content != --UNDEFINED {
      justify-content: $justify-content;
    }
  }
}

@mixin size-style(
  $width: --UNDEFINED,
  $height: --UNDEFINED,
) {
  @if $width != --UNDEFINED {
    width: $width;
  }
  @if $height != --UNDEFINED {
    height: $height;
  }
}

@mixin font-style(
  $color,
  $font-size: --UNDEFINED,
  $font-weight: --UNDEFINED,
  $font-family: --UNDEFINED,
  $line-height: --UNDEFINED,
  $text-decoration: --UNDEFINED,
) {
  @if $color != --UNDEFINED {
    color: $color;
  }
  @if $font-family != --UNDEFINED {
    font-family: $font-family;
  }
  @if $font-size != --UNDEFINED {
    font-size: $font-size;
  }
  @if $font-weight != --UNDEFINED {
    font-weight: $font-weight;
  }
  @if $line-height != --UNDEFINED {
    line-height: $line-height;
  }
  @if $text-decoration != --UNDEFINED {
    text-decoration: $text-decoration;
  }
}

@mixin layout-style(
  $bg-color,
  $border-color,
  $border-width: --UNDEFINED,
  $border-style: --UNDEFINED,
  $border-radius: --UNDEFINED,
  $box-shadow: --UNDEFINED,
  $opacity: --UNDEFINED,
) {
  @if $bg-color != --UNDEFINED {
    background-color: $bg-color;
  }
  @if $border-color != --UNDEFINED {
    border-color: $border-color;
  }
  @if $border-width != --UNDEFINED {
    border-width: $border-width;
  }
  @if $border-style != --UNDEFINED {
    border-style: $border-style;
  }
  @if $border-radius != --UNDEFINED {
    border-radius: $border-radius;
  }
  @if $box-shadow != --UNDEFINED {
    box-shadow: $box-shadow;
  }
  @if $opacity != --UNDEFINED {
    opacity: $opacity;
  }
}

@mixin padding-style(
  $vertical-padding,
  $horizontal-padding,
) {
  padding: $vertical-padding $horizontal-padding;
}

@mixin cursor-style(
  $cursor: --UNDEFINED,
  $pointer-events: --UNDEFINED,
  $user-select: --UNDEFINED,
) {
  @if $cursor != --UNDEFINED {
    cursor: $cursor;
  }
  @if $pointer-events != --UNDEFINED {
    pointer-events: $pointer-events;
  }
  @if $user-select != --UNDEFINED {
    user-select: $user-select;
  }
}

@mixin transition-style(
  $transition,
) {
  transition: $transition;

  @media screen and (prefers-reduced-motion: reduce) {
    & {
      transition: none;
    }
  }
}
