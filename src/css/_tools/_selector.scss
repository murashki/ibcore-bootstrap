@use "sass:list";
@use "sass:meta";
@use "sass:selector";

@function expand-selector($selector) {
  @if $selector == --ANY {
    @return "*";
  }
  @else if $selector == --THAT {
    @return ":is(*)";
  }
  @else if $selector == --HOVER {
    @return ":hover";
  }
  @else if $selector == --ACTIVE {
    @return ":active";
  }
  @else if $selector == --FOCUS {
    @return ":focus";
  }
  @else if $selector == --DISABLED {
    @return ":disabled";
  }
  @else if $selector == --READONLY {
    @return "[readonly]";
  }
  @else if $selector == --CHECKED {
    @return ":checked";
  }
  @else if $selector == --VISITED {
    @return ":visited";
  }
  @else if $selector == --FIRST-CHILD {
    @return ":first-child";
  }
  @else if $selector == --LAST-CHILD {
    @return ":last-child";
  }
  @else if $selector == --FIRST-OF-TYPE {
    @return ":first-of-type";
  }
  @else if $selector == --LAST-OF-TYPE {
    @return ":last-of-type";
  }
  @else {
    @return $selector;
  }
}

@function get-flat-values($list) {
  $result: ();

  @for $i from 1 through list.length($list) {
    $e: list.nth($list, $i);

    @if meta.type-of($e) == "list" {
      $result: list.join($result, get-flat-values($e), $separator: comma);
    } @else {
      $result: list.join($result, ($e), $separator: comma);
    }
  }

  @return $result;
}

@function get-unique-values($list) {
  $result: ();

  @for $i from 1 through list.length($list) {
    $e: list.nth($list, $i);

    @if list.index($result, $e) == null {
      $result: list.append($result, $e, $separator: comma);
    }
  }

  @return $result;
}

@function to-string($list, $glue: "") {
  $values: get-unique-values(get-flat-values($list));
  $result: "";

  @for $i from 1 through list.length($values) {
    $e: list.nth($values, $i);

    $result: "#{$result}#{expand-selector($e)}";

    @if ($i != list.length($values)) {
      $result: "#{$result}#{$glue}";
    }
  }

  @return $result;
}

@function get-nest-selectors($selectors...) {
  $nest-selectors: ();

  @for $i from 1 through list.length($selectors) {
    $selector: list.nth($selectors, $i);

    @if meta.type-of($selector) == "list" {
      $nest-selectors: list.append($nest-selectors, to-string($selector, $glue: ", "), $separator: comma);
    }
    @else if meta.type-of($selector) == "function" {
      $nest-selectors: list.append($nest-selectors, meta.call($selector), $separator: comma);
    }
    @else {
      $nest-selectors: list.append($nest-selectors, expand-selector($selector), $separator: comma);
    }
  }

  @return $nest-selectors;
}

@mixin use($selectors...) {
  $nest-selectors: get-nest-selectors($selectors...);
  @if & {
    #{selector.nest(&, $nest-selectors...)} {
      @content;
    }
  }
  @else {
    #{selector.nest($nest-selectors...)} {
      @content;
    }
  }
}

@mixin use-before() {
  &::before {
    @content;
  }
}

@mixin use-after() {
  &::after {
    @content;
  }
}

@mixin use-placeholder() {
  &::placeholder {
    @content;
  }
}

@mixin exactly($selectors...) {
  $nest-selectors: get-nest-selectors($selectors...);
  @at-root {
    #{selector.nest(&, $nest-selectors...)} {
      @content;
    }
  }
}

@function optionally(
  $selector,
) {
  @return ("&", $selector);
}

@function that-is($selector) {
  @return "&#{expand-selector($selector)}";
}

@function that-is-not($selector) {
  @return "&:not(#{expand-selector($selector)})";
}

@function that-is-inside($selector) {
  @return "#{expand-selector($selector)} &";
}

@function that-is-child-of($selector) {
  @return "#{expand-selector($selector)} > &";
}

@function that-is-subsequent-to($selector) {
  @return "#{expand-selector($selector)} ~ &";
}

@function that-has($selectors...) {
  $nest-selectors: get-nest-selectors($selectors...);
  @return "&:has(#{selector.nest($nest-selectors...)})";
}

@function that-has-not($selectors...) {
  $nest-selectors: get-nest-selectors($selectors...);
  @return "&:not(:has(#{selector.nest($nest-selectors...)}))";
}
